<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.spring.ex02.BoardMapper">
<!-- namespace : dao 클래스의 sqlSession과 연결하기 위한 키로 사용  
 -> mapper 를 쿼리라고 생각! -> 여기다가 쿼리를 짠다
-->

	<!--
	mapper 태그
	<insert>, <select>, <update>, <delete>
	dao- sqlSession의 함수(insert, selectOne, selectList, update, delete)와
	메핑되어 쿼리를 수행
	  -->
	<!--
	insert into test_board (board_title, board_content, member_id)
	values(?, ?, ?);
	
	  -->
	  
	 <!-- id: dao 클래스의 sqlSession 특정 함수와 연결하기 위해 사용  -->
	 
	 <!--
	 ${key 이름}	: mybatis-config.xml의 property - name과 매칭, DB테이블의 컬럼
	 ${key 이름} : dao.클래스의 sqlSession에서 전송받은 데이터(입력되는 데이터)
	   --> 
	 <insert id="insert"> <!--여러개의 insert 있을 시구분하기 위해 id 필요  -->
	 	insert into ${test_board} (${boardTitle}, ${boardContent}, ${memberId})
	 	<!--mybatis config의 name과 동일하게  -->
	 	values (#{boardTitle}, #{boardContent}, #{memberId})
	 </insert>
	 
	 <select id="select_all" resultType="BoardVO">
	 	select * from ${test_board}
	 	order by ${boardId} desc
	 </select>
	 
	 <select id="select_by_board_id" resultType="BoardVO">
	 	select * from ${test_board} where ${boardId} = #{boardId}	 	
	 </select>
	 
	 <update id="update">
	 	update ${test_board}
	 	set ${boardTitle} = #{boardTitle}, ${boardContent} = #{boardContent}
	 	where ${boardId} = #{boardId}
	 </update>
	
	<delete id="delete">
		delete from ${test_board}
		where ${boardId} = #{boardId}
	</delete>
	
</mapper>













